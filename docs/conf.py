# -*- coding: utf-8 -*-
#
# Automatically generated by nengo-bones, do not edit this file directly

import os

import nengo_dl

extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.githubpages",
    "sphinx.ext.intersphinx",
    "sphinx.ext.mathjax",
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    "nbsphinx",
    "nengo_sphinx_theme",
    "numpydoc",
    "sphinx_click.ext",
    "sphinx.ext.doctest",
]

# -- sphinx.ext.autodoc
autoclass_content = "both"  # class and __init__ docstrings are concatenated
autodoc_default_options = {"members": None}
autodoc_member_order = "bysource"  # default is alphabetical

# -- sphinx.ext.intersphinx
intersphinx_mapping = {
    "nengo": ("https://www.nengo.ai/nengo/", None),
    "numpy": ("https://docs.scipy.org/doc/numpy", None),
    "python": ("https://docs.python.org/3", None),
}

# -- sphinx.ext.todo
todo_include_todos = True

# -- numpydoc config
numpydoc_show_class_members = False

# -- nbsphinx
nbsphinx_timeout = -1

# -- sphinx
nitpicky = True
exclude_patterns = [
    "_build",
    "**/.ipynb_checkpoints",
]
linkcheck_timeout = 30
source_suffix = ".rst"
source_encoding = "utf-8"
master_doc = "index"
linkcheck_ignore = [r"http://localhost:\d+"]
linkcheck_anchors = True
default_role = "py:obj"
pygments_style = "sphinx"
suppress_warnings = ["image.nonlocal_uri"]
doctest_global_setup = """
import nengo
import nengo_dl
import numpy as np
import tensorflow as tf
"""

project = "NengoDL"
authors = "Applied Brain Research"
copyright = "2015-2019 Applied Brain Research"
version = ".".join(nengo_dl.__version__.split(".")[:2])  # Short X.Y version
release = nengo_dl.__version__  # Full version, with tags

# -- HTML output
templates_path = ["_templates"]
html_static_path = ["_static"]
html_theme = "nengo_sphinx_theme"
html_title = "NengoDL {0} docs".format(release)
htmlhelp_basename = "NengoDL"
html_last_updated_fmt = ""  # Default output format (suppressed)
html_show_sphinx = False
html_favicon = os.path.join("_static", "favicon.ico")
html_theme_options = {
    "nengo_logo": "nengo-dl-full-light.svg",
    "nengo_logo_color": "#ff6600",
    "analytics_id": "UA-41658423-2",
}

# pylint: disable=wrong-import-order

import errno
import inspect

from docutils.parsers.rst import directives
from sphinx.ext.autosummary import Autosummary, get_documenter

# create redirect pages (from_page, to_page)
# TODO: we can remove these redirects after a few releases
redirects = [
    ("frontend.html", "user-guide.html"),
    ("backend.html", "reference.html#developers"),
    ("builder.html", "reference.html#builder"),
    ("extra_objects.html", "reference.html#neuron-types"),
    ("graph_optimizer.html", "reference.html#graph-optimization"),
    ("operators.html", "reference.html#operator-builders"),
    ("learning_rules.html", "reference.html#operator-builders"),
    ("neurons.html", "reference.html#operator-builders"),
    ("op_builders.html", "reference.html#operator-builders"),
    ("processes.html", "reference.html#operator-builders"),
    ("tensor_node_builders.html", "reference.html#operator-builders"),
    ("signals.html", "reference.html#signals"),
    ("tensor_graph.html", "reference.html#graph-construction"),
    ("utils.html", "reference.html#utilities"),
    ("tensor_node.html", "tensor-node.html"),
    ("examples/nef_init.html", "examples/nef-init.html"),
    ("examples/pretrained_model.html", "examples/pretrained-model.html"),
    ("examples/spa_memory.html", "examples/spa-memory.html"),
    ("examples/spa_retrieval.html", "examples/spa-retrieval.html"),
    ("examples/spiking_mnist.html", "examples/spiking-mnist.html"),
    ("examples/pretrained-model.html", "examples/tensorflow-models.html"),
    ("training.html", "simulator.html"),
]


def setup(app):
    def mkdir_p(path):
        try:
            os.makedirs(path)
        except OSError as exc:
            if exc.errno == errno.EEXIST and os.path.isdir(path):
                pass
            else:
                raise

    def redirect_pages(app, docname):
        if app.builder.name == "html":
            for src, dst in app.config.redirects:
                srcfile = os.path.join(app.outdir, src)
                dsturl = "/".join([".." for _ in range(src.count("/"))] + [dst])
                mkdir_p(os.path.dirname(srcfile))
                with open(srcfile, "w") as fp:
                    fp.write(
                        "\n".join(
                            [
                                "<!DOCTYPE html>",
                                "<html>",
                                " <head><title>This page has moved</title></head>",
                                " <body>",
                                '  <script type="text/javascript">',
                                '   window.location.replace("{0}");',
                                "  </script>",
                                "  <noscript>",
                                '   <meta http-equiv="refresh" content="0; url={0}">',
                                "  </noscript>",
                                " </body>",
                                "</html>",
                            ]
                        ).format(dsturl)
                    )

    app.add_config_value("redirects", [], "")
    app.connect("build-finished", redirect_pages)

    class AutoAutoSummary(Autosummary):
        """
        Automatically generates a summary for a class or module.

        For classes this adds a summary for all methods.

        For modules this adds a summary for all classes/functions.
        """

        option_spec = {
            "nosignatures": directives.unchanged,
            "exclude-members": directives.unchanged,
        }

        required_arguments = 1

        def get_members(self, obj, typ, include_public=None):
            if include_public is None:
                include_public = []

            obj_module = obj.__module__ if inspect.isclass(obj) else obj.__name__

            items = []
            for name in obj.__dict__:
                if name in include_public or not name.startswith("_"):
                    attr = getattr(obj, name)
                    doc = get_documenter(self.env.app, attr, obj)

                    if (
                        doc.objtype in typ
                        and attr.__module__ == obj_module
                        and name not in self.options.get("exclude-members", [])
                    ):
                        items.append(name)

            return items

        def run(self):
            clazz = str(self.arguments[0])
            (module_name, obj_name) = clazz.rsplit(".", 1)
            mod = __import__(module_name, globals(), locals(), [obj_name])
            obj = getattr(mod, obj_name)

            new_content = []
            if inspect.isclass(obj):
                # for classes, we automatically document all methods.
                # methods with decorators may show up as "attributes"
                items = self.get_members(obj, ["method", "attribute"])

                # add the class itself
                new_content.append(clazz)
            else:
                # for modules, we automatically document all classes and functions
                items = self.get_members(obj, ["class", "function"])

            new_content.extend("%s.%s" % (clazz, item) for item in items)
            self.content = new_content + self.content.data

            return super(AutoAutoSummary, self).run()

    app.add_directive("autoautosummary", AutoAutoSummary)
